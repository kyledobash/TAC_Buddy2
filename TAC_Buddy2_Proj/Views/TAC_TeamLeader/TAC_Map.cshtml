@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}

<script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
<style type="text/css">
    /* Always set the map height explicitly to define the size of the div
       * element that contains the map. */
    #map {
        height: 650px;
        width:fit-content();
    }

    /* Optional: Makes the sample page fill the window. */
    html,
    body {
        height: 100%;
        margin: 0;
        padding: 0;
    }
    .gm-style-iw-d {
        color: green;
    }
</style>
<script>
    let map, infoWindow;
    function initMap() {
        map = new google.maps.Map(document.getElementById("map"), {
            center: { lat: 59.325, lng: 18.07 },
            zoom: 8,
            mapTypeId: 'satellite',
            disableDefaultUI: true,
            zoomControl: true,
            mapTypeControl: true,
            scaleControl: true,
            streetViewControl: false,
            rotateControl: true,
            fullscreenControl: true,
            mapTypeControlOptions: {
                mapTypeIds: ["satellite", "terrain", "hybrid"],
                style: google.maps.MapTypeControlStyle.DEFAULT,
            }
        });

        map.addListener('click', function (e) {
            placeMarker(e.latLng, map);            
        });

        infoWindow = new google.maps.InfoWindow();
        const locationButton = document.createElement("button");
        locationButton.textContent = "Go to Current Location";
        locationButton.classList.add("custom-map-control-button");
        map.controls[google.maps.ControlPosition.TOP_CENTER].push(locationButton);
        locationButton.addEventListener("click", () => {
            // Try HTML5 geolocation.
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                    (position) => {
                        const pos = {
                            lat: position.coords.latitude,
                            lng: position.coords.longitude,
                        };

                        /*const elevationURL = https://maps.googleapis.com/maps/api/elevation/json?locations=40.7143528,-74.0059731&key=AIzaSyDBmz8zq22XilZVFyZ2CUtMS7rXT0PHjWU;*/

                        const infowindow = new google.maps.InfoWindow({
                            //change this line to inclue elevation and mgrs
                            content: "<b><u>*** FRIENDLY POSITION ***</u></br> Grid: " + MGRSString(pos.lat, pos.lng) + "</b>",
                        });

                        var marker = new google.maps.Marker({
                            position: pos,
                            map: map,
                            icon: {
                                url: "http://maps.google.com/mapfiles/ms/icons/green-dot.png"
                            }
                        });

                        marker.addListener("click", () => {
                            infowindow.open(map, marker);
                        });
                        
                        map.setCenter(pos);
                        map.zoom = 18;                        
                    },
                    () => {
                        handleLocationError(true, infoWindow, map.getCenter());
                    }
                );
            } else {
                // Browser doesn't support Geolocation
                handleLocationError(false, infoWindow, map.getCenter());
            }
        });

    }

    var targetCounter = 0;
    function placeMarker(position, map) {
        var marker = new google.maps.Marker({
            position: position,
            map: map
        });

        marker.addListener("click", () => {
            infowindow.open(map, marker);
        });

        map.panTo(position);

        targetCounter++;
        var currentlat = marker.getPosition().lat();
        var currrentlng = marker.getPosition().lng();
        const infowindow = new google.maps.InfoWindow({
            //change this line to inclue elevation and mgrs
            content: "<div class='target' style='color:red'><u><b>Target " + targetCounter + ":</u></br>" + MGRSString(currentlat, currrentlng) + "</b></div>",
        });
    }   

    function handleLocationError(browserHasGeolocation, infoWindow, pos) {
        infoWindow.setPosition(pos);
        infoWindow.setContent(
            browserHasGeolocation
                ? "Error: The Geolocation service failed."
                : "Error: Your browser doesn't support geolocation."
        );
        infoWindow.open(map);


    }

    function MGRSString(Lat, Long) {
        if (Lat < -80) return 'Too far South'; if (Lat > 84) return 'Too far North';
        var c = 1 + Math.floor((Long + 180) / 6);
        var e = c * 6 - 183;
        var k = Lat * Math.PI / 180;
        var l = Long * Math.PI / 180;
        var m = e * Math.PI / 180;
        var n = Math.cos(k);
        var o = 0.006739496819936062 * Math.pow(n, 2);
        var p = 40680631590769 / (6356752.314 * Math.sqrt(1 + o));
        var q = Math.tan(k);
        var r = q * q;
        var s = (r * r * r) - Math.pow(q, 6);
        var t = l - m;
        var u = 1.0 - r + o;
        var v = 5.0 - r + 9 * o + 4.0 * (o * o);
        var w = 5.0 - 18.0 * r + (r * r) + 14.0 * o - 58.0 * r * o;
        var x = 61.0 - 58.0 * r + (r * r) + 270.0 * o - 330.0 * r * o;
        var y = 61.0 - 479.0 * r + 179.0 * (r * r) - (r * r * r);
        var z = 1385.0 - 3111.0 * r + 543.0 * (r * r) - (r * r * r);
        var aa = p * n * t + (p / 6.0 * Math.pow(n, 3) * u * Math.pow(t, 3)) + (p / 120.0 * Math.pow(n, 5) * w * Math.pow(t, 5)) + (p / 5040.0 * Math.pow(n, 7) * y * Math.pow(t, 7));
        var ab = 6367449.14570093 * (k - (0.00251882794504 * Math.sin(2 * k)) + (0.00000264354112 * Math.sin(4 * k)) - (0.00000000345262 * Math.sin(6 * k)) + (0.000000000004892 * Math.sin(8 * k))) + (q / 2.0 * p * Math.pow(n, 2) * Math.pow(t, 2)) + (q / 24.0 * p * Math.pow(n, 4) * v * Math.pow(t, 4)) + (q / 720.0 * p * Math.pow(n, 6) * x * Math.pow(t, 6)) + (q / 40320.0 * p * Math.pow(n, 8) * z * Math.pow(t, 8));
        aa = aa * 0.9996 + 500000.0;
        ab = ab * 0.9996; if (ab < 0.0) ab += 10000000.0;
        var ad = 'CDEFGHJKLMNPQRSTUVWXX'.charAt(Math.floor(Lat / 8 + 10));
        var ae = Math.floor(aa / 100000);
        var af = ['ABCDEFGH', 'JKLMNPQR', 'STUVWXYZ'][(c - 1) % 3].charAt(ae - 1);
        var ag = Math.floor(ab / 100000) % 20;
        var ah = ['ABCDEFGHJKLMNPQRSTUV', 'FGHJKLMNPQRSTUVABCDE'][(c - 1) % 2].charAt(ag);
        function pad(val) { if (val < 10) { val = '0000' + val } else if (val < 100) { val = '000' + val } else if (val < 1000) { val = '00' + val } else if (val < 10000) { val = '0' + val }; return val };
        aa = Math.floor(aa % 100000); aa = pad(aa);
        ab = Math.floor(ab % 100000); ab = pad(ab);
        return c + ad + ' ' + af + ah + ' ' + aa + ' ' + ab;
    };
</script>
<h3>TAC Map</h3>
<div id="map"></div>

<!-- Async script executes immediately and must be after any DOM elements used in callback. -->
<script src="https://maps.googleapis.com/maps/api/js?key=@ViewBag.key&callback=initMap&libraries=&v=weekly"
        async></script>